package Stream.Complex_tasks;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Task1 {
    public static void main(String[] args) {
        /*–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å `map()`, `filter()`, `forEach()` –∏ `reduce()`.
        ### üî• **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏:***/

        /*1Ô∏è‚É£ **–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å:**
           –î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `[3, 12, 5, 18, 7, 20, 15]`.
           - –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞.
           - –£–º–Ω–æ–∂—å –∏—Ö –Ω–∞ 3.
           - –í—ã–≤–µ–¥–∏ –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
        List<Integer> nums = Arrays.asList(3, 12, 5, 18, 7, 20, 15);
        List<Integer> res = nums.stream().filter(e -> e %2 == 0).map(e -> e*3).collect(Collectors.toList());
        System.out.println(res);*/


        /*2Ô∏è‚É£ **–ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞:**
           –î–∞–Ω —Å–ø–∏—Å–æ–∫ `[9, 4, 11, 16, 23, 8, 42, 15]`.
           - –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞.
           - –ù–∞–π–¥–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ.
        List<Integer> nums = Arrays.asList(9, 4, 11, 16, 23, 8, 42, 15);
        int evenNum = nums.stream().filter(e -> e %2 == 0).reduce((a, e) -> e > a ? e : a).get();
        System.out.println(evenNum);*/

       /* 3Ô∏è‚É£ **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤:**
           –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ `["java", "stream", "api", "functional", "lambda"]`.
           - –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ø–∏—Å–æ–∫ –≤ –¥–ª–∏–Ω—ã —Å–ª–æ–≤.
           - –ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤.
        List<String> str = Arrays.asList("java", "stream", "api", "functional", "lambda");
        int sum = str.stream().map(e -> e.length())
                .reduce(0, (a, e) -> e+a);
        double avgLength = (double)sum / str.size();
        System.out.println(avgLength);*/

        /*4Ô∏è‚É£ **–°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π "a":**
           –î–∞–Ω —Å–ø–∏—Å–æ–∫ `["apple", "banana", "apricot", "grape", "avocado"]`.
           - –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "a".
           - –ù–∞–π–¥–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ.
        List<String> str = Arrays.asList("apple", "banana", "apricot", "grape", "avocado");
        List<String> str2 = str.stream().filter(e->e.charAt(0) == 'a' ).collect(Collectors.toList());
        System.out.println(str2);*/


    }
}
